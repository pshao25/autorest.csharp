// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace AdditionalPropertiesEx.Models
{
    /// <summary> The second level model in polymorphic multiple levels inheritance which contains references to other polymorphic instances. </summary>
    public partial class Salmon : Fish
    {
        /// <summary> Initializes a new instance of Salmon. </summary>
        /// <param name="age"></param>
        public Salmon(int age) : base(age)
        {
            Friends = new ChangeTrackingList<Fish>();
            Hate = new ChangeTrackingDictionary<string, Fish>();
            Kind = "salmon";
        }

        /// <summary> Initializes a new instance of Salmon. </summary>
        /// <param name="kind"> Discriminator property for Fish. </param>
        /// <param name="age"></param>
        /// <param name="friends">
        /// Please note <see cref="Fish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="GoblinShark"/>, <see cref="Salmon"/>, <see cref="SawShark"/> and <see cref="Shark"/>.
        /// </param>
        /// <param name="hate">
        /// Dictionary of &lt;Fish&gt;
        /// Please note <see cref="Fish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="GoblinShark"/>, <see cref="Salmon"/>, <see cref="SawShark"/> and <see cref="Shark"/>.
        /// </param>
        /// <param name="partner">
        /// This is base model for polymorphic multiple levels inheritance with a discriminator.
        /// Please note <see cref="Fish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="GoblinShark"/>, <see cref="Salmon"/>, <see cref="SawShark"/> and <see cref="Shark"/>.
        /// </param>
        internal Salmon(string kind, int age, IList<Fish> friends, IDictionary<string, Fish> hate, Fish partner) : base(kind, age)
        {
            Friends = friends;
            Hate = hate;
            Partner = partner;
            Kind = kind ?? "salmon";
        }

        /// <summary>
        /// Gets the friends
        /// Please note <see cref="Fish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="GoblinShark"/>, <see cref="Salmon"/>, <see cref="SawShark"/> and <see cref="Shark"/>.
        /// </summary>
        public IList<Fish> Friends { get; }
        /// <summary>
        /// Dictionary of &lt;Fish&gt;
        /// Please note <see cref="Fish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="GoblinShark"/>, <see cref="Salmon"/>, <see cref="SawShark"/> and <see cref="Shark"/>.
        /// </summary>
        public IDictionary<string, Fish> Hate { get; }
        /// <summary>
        /// This is base model for polymorphic multiple levels inheritance with a discriminator.
        /// Please note <see cref="Fish"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="GoblinShark"/>, <see cref="Salmon"/>, <see cref="SawShark"/> and <see cref="Shark"/>.
        /// </summary>
        public Fish Partner { get; set; }
    }
}
