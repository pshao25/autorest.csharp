// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using ConfidentialLedger;

namespace confidentialledger
{
    // Data plane generated client. The ConfidentialLedger service client.
    /// <summary> The ConfidentialLedger service client. </summary>
    public partial class ConfidentialLedgerClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ConfidentialLedgerClient for mocking. </summary>
        protected ConfidentialLedgerClient()
        {
        }

        /// <summary> Initializes a new instance of ConfidentialLedgerClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public ConfidentialLedgerClient(Uri endpoint) : this(endpoint, new ConfidentialLedgerClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ConfidentialLedgerClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public ConfidentialLedgerClient(Uri endpoint, ConfidentialLedgerClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new ConfidentialLedgerClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Gets quotes for all nodes of the Confidential Ledger. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <remarks> A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave. </remarks>
        public virtual async Task<Response> GetEnclaveQuoteValuesAsync(string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetEnclaveQuoteValues");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetEnclaveQuotesAsync(apiVersion, context).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets quotes for all nodes of the Confidential Ledger. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <remarks> A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave. </remarks>
        public virtual Response GetEnclaveQuoteValues(string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetEnclaveQuoteValues");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = GetEnclaveQuotes(apiVersion, context);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets quotes for all nodes of the Confidential Ledger. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetEnclaveQuotesAsync with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = await client.GetEnclaveQuotesAsync("<apiVersion>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave. </remarks>
        public virtual async Task<Response> GetEnclaveQuotesAsync(string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetEnclaveQuotes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEnclaveQuotesRequest(apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets quotes for all nodes of the Confidential Ledger. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetEnclaveQuotes with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = client.GetEnclaveQuotes("<apiVersion>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave. </remarks>
        public virtual Response GetEnclaveQuotes(string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetEnclaveQuotes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEnclaveQuotesRequest(apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the constitution used for governance. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetConstitutionAsync with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = await client.GetConstitutionAsync("<apiVersion>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> The constitution is a script that assesses and applies proposals from consortium members. </remarks>
        public virtual async Task<Response> GetConstitutionAsync(string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetConstitution");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConstitutionRequest(apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the constitution used for governance. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetConstitution with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = client.GetConstitution("<apiVersion>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> The constitution is a script that assesses and applies proposals from consortium members. </remarks>
        public virtual Response GetConstitution(string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetConstitution");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConstitutionRequest(apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the consortium members. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetConsortiumMembersAsync with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = await client.GetConsortiumMembersAsync("<apiVersion>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> Consortium members can manage the Confidential Ledger. </remarks>
        public virtual async Task<Response> GetConsortiumMembersAsync(string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetConsortiumMembers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConsortiumMembersRequest(apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the consortium members. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetConsortiumMembers with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = client.GetConsortiumMembers("<apiVersion>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> Consortium members can manage the Confidential Ledger. </remarks>
        public virtual Response GetConsortiumMembers(string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetConsortiumMembers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConsortiumMembersRequest(apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetLedgerEntriesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = await client.GetLedgerEntriesAsync("<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("contents").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("collectionId").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned.
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   value: [
        ///     {
        ///       contents: string, # Required.
        ///       collectionId: string, # Required.
        ///       transactionId: {
        ///       }, # Required.
        ///     }
        ///   ], # Required.
        ///   nextLink: {
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetLedgerEntriesAsync(string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetLedgerEntries");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLedgerEntriesRequest(apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetLedgerEntries with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = client.GetLedgerEntries("<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("contents").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("collectionId").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned.
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   value: [
        ///     {
        ///       contents: string, # Required.
        ///       collectionId: string, # Required.
        ///       transactionId: {
        ///       }, # Required.
        ///     }
        ///   ], # Required.
        ///   nextLink: {
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetLedgerEntries(string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetLedgerEntries");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLedgerEntriesRequest(apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Writes a ledger entry. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateLedgerEntryAsync with required request content.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// var data = new {
        ///     contents = "<contents>",
        /// };
        /// 
        /// Response response = await client.CreateLedgerEntryAsync(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// A collection id may optionally be specified.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ResourceCreateOrReplaceModel</c>:
        /// <code>{
        ///   contents: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateLedgerEntryAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.CreateLedgerEntry");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateLedgerEntryRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Writes a ledger entry. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateLedgerEntry with required request content.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// var data = new {
        ///     contents = "<contents>",
        /// };
        /// 
        /// Response response = client.CreateLedgerEntry(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// A collection id may optionally be specified.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ResourceCreateOrReplaceModel</c>:
        /// <code>{
        ///   contents: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateLedgerEntry(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.CreateLedgerEntry");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateLedgerEntryRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the current value available in the ledger. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="collectionId"> The collection id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetCurrentLedgerEntryAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = await client.GetCurrentLedgerEntryAsync("<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("contents").ToString());
        /// Console.WriteLine(result.GetProperty("collectionId").ToString());
        /// ]]></code>
        /// This sample shows how to call GetCurrentLedgerEntryAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = await client.GetCurrentLedgerEntryAsync("<apiVersion>", "<collectionId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("contents").ToString());
        /// Console.WriteLine(result.GetProperty("collectionId").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Runs a custom action on LedgerEntry
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>LedgerEntry</c>:
        /// <code>{
        ///   contents: string, # Required.
        ///   collectionId: string, # Required.
        ///   transactionId: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetCurrentLedgerEntryAsync(string apiVersion, string collectionId = null, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetCurrentLedgerEntry");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCurrentLedgerEntryRequest(apiVersion, collectionId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the current value available in the ledger. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="collectionId"> The collection id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetCurrentLedgerEntry with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = client.GetCurrentLedgerEntry("<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("contents").ToString());
        /// Console.WriteLine(result.GetProperty("collectionId").ToString());
        /// ]]></code>
        /// This sample shows how to call GetCurrentLedgerEntry with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = client.GetCurrentLedgerEntry("<apiVersion>", "<collectionId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("contents").ToString());
        /// Console.WriteLine(result.GetProperty("collectionId").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Runs a custom action on LedgerEntry
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>LedgerEntry</c>:
        /// <code>{
        ///   contents: string, # Required.
        ///   collectionId: string, # Required.
        ///   transactionId: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetCurrentLedgerEntry(string apiVersion, string collectionId = null, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetCurrentLedgerEntry");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCurrentLedgerEntryRequest(apiVersion, collectionId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Post a user role. </summary>
        /// <param name="ledgerUserRole"> The LedgerUserRole to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostLedgerUserRoleValueAsync(LedgerUserRole ledgerUserRole, CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.PostLedgerUserRoleValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await PostLedgerUserRoleAsync(ledgerUserRole.ToString(), context).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Post a user role. </summary>
        /// <param name="ledgerUserRole"> The LedgerUserRole to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostLedgerUserRoleValue(LedgerUserRole ledgerUserRole, CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.PostLedgerUserRoleValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = PostLedgerUserRole(ledgerUserRole.ToString(), context);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Post a user role. </summary>
        /// <param name="ledgerUserRole"> The LedgerUserRole to use. Allowed values: &quot;Administrator&quot; | &quot;Contributor&quot; | &quot;Reader&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUserRole"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PostLedgerUserRoleAsync with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = await client.PostLedgerUserRoleAsync("<ledgerUserRole>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> PostLedgerUserRoleAsync(string ledgerUserRole, RequestContext context = null)
        {
            Argument.AssertNotNull(ledgerUserRole, nameof(ledgerUserRole));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.PostLedgerUserRole");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostLedgerUserRoleRequest(ledgerUserRole, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Post a user role. </summary>
        /// <param name="ledgerUserRole"> The LedgerUserRole to use. Allowed values: &quot;Administrator&quot; | &quot;Contributor&quot; | &quot;Reader&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUserRole"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PostLedgerUserRole with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = client.PostLedgerUserRole("<ledgerUserRole>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response PostLedgerUserRole(string ledgerUserRole, RequestContext context = null)
        {
            Argument.AssertNotNull(ledgerUserRole, nameof(ledgerUserRole));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.PostLedgerUserRole");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostLedgerUserRoleRequest(ledgerUserRole, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Posts a user. </summary>
        /// <param name="ledgerUser"> The LedgerUser to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUser"/> is null. </exception>
        public virtual async Task<Response<LedgerUser>> PostUserAsync(LedgerUser ledgerUser, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(ledgerUser, nameof(ledgerUser));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await PostUserAsync(ledgerUser.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(LedgerUser.FromResponse(response), response);
        }

        /// <summary> Posts a user. </summary>
        /// <param name="ledgerUser"> The LedgerUser to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUser"/> is null. </exception>
        public virtual Response<LedgerUser> PostUser(LedgerUser ledgerUser, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(ledgerUser, nameof(ledgerUser));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = PostUser(ledgerUser.ToRequestContent(), context);
            return Response.FromValue(LedgerUser.FromResponse(response), response);
        }

        /// <summary> Posts a user. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostUserAsync with required request content and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// var data = new {
        ///     userId = "<userId>",
        ///     assignedRole = "Administrator",
        /// };
        /// 
        /// Response response = await client.PostUserAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("userId").ToString());
        /// Console.WriteLine(result.GetProperty("assignedRole").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>LedgerUser</c>:
        /// <code>{
        ///   userId: string, # Required.
        ///   assignedRole: &quot;Administrator&quot; | &quot;Contributor&quot; | &quot;Reader&quot;, # Required.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>LedgerUser</c>:
        /// <code>{
        ///   userId: string, # Required.
        ///   assignedRole: &quot;Administrator&quot; | &quot;Contributor&quot; | &quot;Reader&quot;, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostUserAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.PostUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostUserRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Posts a user. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostUser with required request content and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// var data = new {
        ///     userId = "<userId>",
        ///     assignedRole = "Administrator",
        /// };
        /// 
        /// Response response = client.PostUser(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("userId").ToString());
        /// Console.WriteLine(result.GetProperty("assignedRole").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>LedgerUser</c>:
        /// <code>{
        ///   userId: string, # Required.
        ///   assignedRole: &quot;Administrator&quot; | &quot;Contributor&quot; | &quot;Reader&quot;, # Required.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>LedgerUser</c>:
        /// <code>{
        ///   userId: string, # Required.
        ///   assignedRole: &quot;Administrator&quot; | &quot;Contributor&quot; | &quot;Reader&quot;, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostUser(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.PostUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostUserRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a user from the Confidential Ledger. </summary>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public virtual async Task<Response> DeleteUserValueAsync(string userId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.DeleteUserValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await DeleteUserAsync(userId, context).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a user from the Confidential Ledger. </summary>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public virtual Response DeleteUserValue(string userId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.DeleteUserValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = DeleteUser(userId, context);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a user from the Confidential Ledger. </summary>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteUserAsync with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = await client.DeleteUserAsync("<userId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteUserAsync(string userId, RequestContext context = null)
        {
            Argument.AssertNotNull(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.DeleteUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteUserRequest(userId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a user from the Confidential Ledger. </summary>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteUser with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = client.DeleteUser("<userId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteUser(string userId, RequestContext context = null)
        {
            Argument.AssertNotNull(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.DeleteUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteUserRequest(userId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a user. </summary>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public virtual async Task<Response<LedgerUser>> GetUserValueAsync(string userId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetUserValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetUserAsync(userId, context).ConfigureAwait(false);
                return Response.FromValue(LedgerUser.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a user. </summary>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public virtual Response<LedgerUser> GetUserValue(string userId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetUserValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = GetUser(userId, context);
                return Response.FromValue(LedgerUser.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a user. </summary>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetUserAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = await client.GetUserAsync("<userId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("userId").ToString());
        /// Console.WriteLine(result.GetProperty("assignedRole").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>LedgerUser</c>:
        /// <code>{
        ///   userId: string, # Required.
        ///   assignedRole: &quot;Administrator&quot; | &quot;Contributor&quot; | &quot;Reader&quot;, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetUserAsync(string userId, RequestContext context = null)
        {
            Argument.AssertNotNull(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetUserRequest(userId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a user. </summary>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetUser with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = client.GetUser("<userId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("userId").ToString());
        /// Console.WriteLine(result.GetProperty("assignedRole").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>LedgerUser</c>:
        /// <code>{
        ///   userId: string, # Required.
        ///   assignedRole: &quot;Administrator&quot; | &quot;Contributor&quot; | &quot;Reader&quot;, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetUser(string userId, RequestContext context = null)
        {
            Argument.AssertNotNull(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetUserRequest(userId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds a user or updates a user&apos;s fields. </summary>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateUserAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = await client.CreateOrUpdateUserAsync("<userId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("userId").ToString());
        /// Console.WriteLine(result.GetProperty("assignedRole").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>LedgerUser</c>:
        /// <code>{
        ///   userId: string, # Required.
        ///   assignedRole: &quot;Administrator&quot; | &quot;Contributor&quot; | &quot;Reader&quot;, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateUserAsync(string userId, RequestContext context = null)
        {
            Argument.AssertNotNull(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.CreateOrUpdateUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateUserRequest(userId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds a user or updates a user&apos;s fields. </summary>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateUser with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ConfidentialLedgerClient(endpoint);
        /// 
        /// Response response = client.CreateOrUpdateUser("<userId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("userId").ToString());
        /// Console.WriteLine(result.GetProperty("assignedRole").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>LedgerUser</c>:
        /// <code>{
        ///   userId: string, # Required.
        ///   assignedRole: &quot;Administrator&quot; | &quot;Contributor&quot; | &quot;Reader&quot;, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdateUser(string userId, RequestContext context = null)
        {
            Argument.AssertNotNull(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.CreateOrUpdateUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateUserRequest(userId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetEnclaveQuotesRequest(string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/app/enclaveQuotes", false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetConstitutionRequest(string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/app/governance/constitution", false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetConsortiumMembersRequest(string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/app/governance/members", false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetLedgerEntriesRequest(string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/app/transactions", false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateCreateLedgerEntryRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/app/transactions", false);
            request.Uri = uri;
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetCurrentLedgerEntryRequest(string apiVersion, string collectionId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/app/transactions:getCurrentLedgerEntry", false);
            uri.AppendQuery("api-version", apiVersion, false);
            if (collectionId != null)
            {
                uri.AppendQuery("collectionId", collectionId, false);
            }
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreatePostLedgerUserRoleRequest(string ledgerUserRole, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/app/userRoles/", false);
            uri.AppendPath(ledgerUserRole, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreatePostUserRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/app/users", false);
            request.Uri = uri;
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteUserRequest(string userId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/app/users/", false);
            uri.AppendPath(userId, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetUserRequest(string userId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/app/users/", false);
            uri.AppendPath(userId, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateUserRequest(string userId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/app/users/", false);
            uri.AppendPath(userId, false);
            request.Uri = uri;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
